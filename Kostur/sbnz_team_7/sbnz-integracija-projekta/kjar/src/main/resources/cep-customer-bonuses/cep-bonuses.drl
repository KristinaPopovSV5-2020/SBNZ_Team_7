package cep_customer_bonuses;

import com.ftn.sbnz.model.models.products.Shopping;
import com.ftn.sbnz.model.models.Feedback;
import com.ftn.sbnz.model.models.Gift;
import com.ftn.sbnz.model.models.products.Product;
import com.ftn.sbnz.model.models.Discount;
import com.ftn.sbnz.model.models.user.User;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Date;
import org.bson.types.ObjectId;
import java.time.temporal.ChronoUnit;
import com.ftn.sbnz.model.models.Discount;
import java.util.Random;
import java.util.Arrays;
declare RecentShopping
    userId: ObjectId
    shoppingEvents: List
end

global java.util.List matchingProductList;
global com.ftn.sbnz.service.DiscountService discountService;
global com.ftn.sbnz.service.implementation.UserServiceImpl userService;
global java.util.List allProducts;

global java.util.List<Discount> generatedDiscounts;
global java.util.List<Gift> generatedGifts;


rule "Create 5% discount for at least 3 feedbacks in last 7 days"
    ruleflow-group "discount-rules"
    salience 200
    when
        $shopping: Shopping(isNew() == true)
        $feedbacks: List() from collect(
            Feedback(userId == $shopping.userId) over window:time(7d)
        )
        eval($feedbacks.size() >= 3)
        not Discount(userId == $shopping.userId, value == 0.05,  
                     dateCreated >= (new Date().time - 7 * 24 * 60 * 60 * 1000))
    then
    
        Discount discount = new Discount($shopping.getUserId(), 0.05, new Date(), false);
        insert(discount);
        generatedDiscounts.add(discount);
        discountService.save(discount);
        System.out.println("User " + $shopping.getUserId() + " received 5% discount");
end


rule "Collect recent purchases"
    ruleflow-group "collection-rules"
    salience 100
    when
        $shopping: Shopping($userId: userId, isNew() == true)
        $recentShoppingEvents: List() from collect(
            Shopping(userId == $userId, this != $shopping) over window:time(30d)
        )
    then
        insert(new RecentShopping($userId, $recentShoppingEvents));
end


rule "Collect products with shared benefits"
    ruleflow-group "collection-rules"
    salience 50
    when
        $recentShopping: RecentShopping($userId: userId, $shoppingEvents: shoppingEvents)
        $shopping: Shopping(userId == $userId, isNew() == true, $productId: productId)
        $product: Product(id == $productId, $benefits: benefits)
        $purchase: Shopping() from $shoppingEvents
        eval($purchase != $shopping)
        $otherProduct: Product(id == $purchase.productId, $otherBenefits: benefits)
        eval(haveCommonBenefit($benefits, $otherBenefits))
    then
        matchingProductList.add($product);   
end

// dodati provjeru za usera!!

rule "Create 50% discount when buying a product that has a matching benefit with previous purchases in last 30 days"
    ruleflow-group "discount-rules"
    salience 10
    when
        eval(matchingProductList.size() >= 3)
       
        $shopping: Shopping(isNew() == true)
        not (
                $discount: Discount(userId == $shopping.userId, value == 0.5) and
                eval($discount.getDateCreated().after(new Date(System.currentTimeMillis() - 30L * 24 * 60 * 60 * 1000)))
            )
    then    
        // for (Object product : matchingProductList) {
        //     Product prod = (Product) product;
        //     System.out.println("Product ID: " + prod.getId());
        // }    
        Discount discount = new Discount($shopping.getUserId(), 0.5, new Date(), false);
        insert(discount);
        generatedDiscounts.add(discount);
        discountService.save(discount);
        System.out.println("User " + $shopping.getUserId() + " received 50% discount");
end


rule "Provide randomn testers for frequent high-value shoppers"
    ruleflow-group "discount-rules"
    salience 5
    when
        $shopping: Shopping(isNew() == true, $userId: userId)
        $user: User(id == $userId)
        not (
            $recentGift: Gift(timeGiven > LocalDateTime.now().minus(1, ChronoUnit.MONTHS)) from $user.getGifts()
        )
        Number(intValue >= 5) from accumulate(
            $recentShopping: Shopping(this != $shopping, value>3000)
            over window:time(30d),
            count($recentShopping)
        )        
    then
        Random random = new Random();
        List<String> gifts = Arrays.asList(
                    "Sunscreen Tester",
                    "Hydration Serum Tester",
                    "Anti-Ageing Cream Tester",
                    "Exfoliating Scrub Tester",
                    "Brightening Mask Tester"
            );
        int randomIndex = random.nextInt(gifts.size());
        String selectedGiftName = gifts.get(randomIndex);

        Gift randomTester = new Gift(selectedGiftName, LocalDateTime.now(), "High-value purchases");
        userService.rewardUser($user, randomTester);
        generatedGifts.add(randomTester);
        insert($user);
        System.out.println("Gifted " + selectedGiftName + " to user.");
end


function boolean haveCommonBenefit(List benefits1, List benefits2) {
    for (Object benefit : benefits1) {
        if (benefits2.contains(benefit)) {
            return true;
        }
    }
    return false;
}




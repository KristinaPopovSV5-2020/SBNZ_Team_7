package cep_customer_bonuses;

import com.ftn.sbnz.model.models.products.Shopping;
import com.ftn.sbnz.model.models.Feedback;
import com.ftn.sbnz.model.models.products.Product;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.List;
import java.util.Date;

rule "Apply 5% discount for at least 3 feedbacks in last 7 days"
    when
        $shopping: Shopping(isNew() == true)
        $feedbacks: List() from collect(
            Feedback(userId == $shopping.userId) over window:time(7d)
        )
        eval($feedbacks.size() >= 3)
    then

        modify($shopping) {setDiscount(0.05);}
        System.out.println("Shopping event " + $shopping.getId() + " gets a 5% discount for user " + $shopping.getUserId() + " giving feedback on different products.");
end





rule "Apply 50% discount for buying 3 products with any of the same benefits in last 30 days"
    when
        $shopping: Shopping($userId: userId, isNew()==true)
        $shoppingEvents: List() from collect(
        Shopping(userId == $userId) over window:time(30d)
        )
    then
        System.out.println($shoppingEvents.size());
end




// iteracija kroz proizvode koje je kupio, akumulira se, provjerava svaka prednost

// rule "Collect Purchases in last 30 days"
//     when 
//         $shoppingEvents: List() from collect(
//             Shopping(userId == $userId, productId != $productId) over window:time(30d)
//             $otherProduct: Product(id == productId) from productId == Shopping.productId,
//             eval($otherProduct.getBenefits().stream().anyMatch(benefit -> $benefits.contains(benefit)))
//         )
//     then

// end

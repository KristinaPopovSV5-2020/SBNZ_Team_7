package cep_customer_bonuses;

import com.ftn.sbnz.model.models.products.Shopping;
import com.ftn.sbnz.model.models.Feedback;
import com.ftn.sbnz.model.models.products.Product;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Date;
import org.bson.types.ObjectId;
import com.ftn.sbnz.model.models.Discount;


declare RecentShopping
    userId: ObjectId
    shoppingEvents: List
end

global java.util.List matchingProductList;
global com.ftn.sbnz.model.models.products.Shopping currentShopping;
global com.ftn.sbnz.service.DiscountService discountService;

rule "Apply 5% discount for at least 3 feedbacks in last 7 days"
    ruleflow-group "discount-rules"
    salience 200
    when
        $shopping: Shopping(isNew() == true)
        $feedbacks: List() from collect(
            Feedback(userId == $shopping.userId) over window:time(7d)
        )
        eval($feedbacks.size() >= 3)
        not Discount(userId == $shopping.userId, value == 0.05,  
                     dateCreated >= (new Date().time - 7 * 24 * 60 * 60 * 1000))
    then
    
        Discount discount = new Discount($shopping.getUserId(), 0.05, new Date(), false);
        insert(discount);
        discountService.save(discount);
        System.out.println("User " + $shopping.getUserId() + " received 5% discount");
end

rule "Collect recent purchases"
    ruleflow-group "collection-rules"
    salience 100
    when
        $shopping: Shopping($userId: userId, isNew() == true)
        $recentShoppingEvents: List() from collect(
            Shopping(userId == $userId, this != $shopping) over window:time(30d)
        )
    then
        insert(new RecentShopping($userId, $recentShoppingEvents));
end

rule "Collect products with shared benefits"
    ruleflow-group "collection-rules"
    salience 50
    when
        $recentShopping: RecentShopping($userId: userId, $shoppingEvents: shoppingEvents)
        $shopping: Shopping(userId == $userId, isNew() == true, $productId: productId)
        $product: Product(id == $productId, $benefits: benefits)
        $purchase: Shopping() from $shoppingEvents
        eval($purchase != $shopping)
        $otherProduct: Product(id == $purchase.productId, $otherBenefits: benefits)
        eval(haveCommonBenefit($benefits, $otherBenefits))
    then
        matchingProductList.add($product);   
end

rule "Apply 50% discount when buying a product that has a matching benefit with previous purchases in last 30 days"
    ruleflow-group "discount-rules"
    salience 10
    when
        eval(matchingProductList.size() >= 3)
    then    
        Shopping $shopping = (Shopping) currentShopping;
        for (Object product : matchingProductList) {
            Product prod = (Product) product;
            System.out.println("Product ID: " + prod.getId());
        }    
        double currentDiscount = $shopping.getDiscount();
        double newDiscount = currentDiscount + 0.5;
        modify($shopping) {setDiscount(newDiscount);}
        System.out.println("Shopping event " + $shopping.getId() + " gets an additional 50% discount. New discount: " + newDiscount);
end


function boolean haveCommonBenefit(List benefits1, List benefits2) {
    for (Object benefit : benefits1) {
        if (benefits2.contains(benefit)) {
            return true;
        }
    }
    return false;
}









//cilj 150 linija :) :D :O
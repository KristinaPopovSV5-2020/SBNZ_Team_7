import com.ftn.sbnz.model.models.products.Product;
import com.ftn.sbnz.model.models.user.User;
import com.ftn.sbnz.facts.RecommendedProduct;
import com.ftn.sbnz.dto.BudgetDTO;
import java.util.List;
import java.util.Set;
import java.util.Collections;

global java.util.List recommendedProducts;

rule "Recommend products based on skin type"
    salience 100
    when
        $user : User($skinType : skinType, $allergenIds : getAllergenIds() != null && !getAllergenIds().isEmpty())
        $product : Product(skinTypes contains $skinType, $ingredientIds : ingredientIds != null)
    then
        System.out.println("1");
        insertLogical(new RecommendedProduct($product, "Perfect for this skin type"));
end



rule "Eliminate products containing allergens"
    salience 50
    when
        $user : User($allergenIds : getAllergenIds() != null && !getAllergenIds().isEmpty())
        $rp : RecommendedProduct($product : getProduct())
        eval(!Collections.disjoint($product.getIngredientIds(), $allergenIds))
    then
        System.out.println("2");
        retract($rp);
end


rule "Filter out products outside of budget"
    salience 9
    when
        $budget : BudgetDTO($minValue : minValue, $maxValue : maxValue)
        $rp : RecommendedProduct($product : getProduct())
        eval($product.getPrice() < $minValue || $product.getPrice() > $maxValue)
    then
        System.out.println("3");
        retract($rp);
end



rule "Add remaining recommended products to global list"
    salience 1
    when
        $rp : RecommendedProduct()
    then
        System.out.println("4");
        recommendedProducts.add($rp);
        retract($rp);
end
package forward;
import com.ftn.sbnz.model.models.products.Product;
import com.ftn.sbnz.model.models.user.User;
import com.ftn.sbnz.model.models.user_input.SkinProblems;
import com.ftn.sbnz.model.models.user_input.LifestyleHabitsInput;
import com.ftn.sbnz.model.models.enums.SkinIssue;
import com.ftn.sbnz.model.models.enums.SkinBenefit;
import com.ftn.sbnz.model.models.enums.LifestyleHabits;
import com.ftn.sbnz.facts.RecommendedProduct;
import java.util.List;
import java.util.Set;
import java.util.Collections;

global java.util.List recommendedProducts;

rule "Recommend products for ACNE"
    salience 100
    when
        $skinProblems: SkinProblems(problems contains SkinIssue.ACNE)
        $product: Product(benefits contains SkinBenefit.ACNE_REDUCING)
    then
        System.out.println("1");
        insert(new RecommendedProduct($product, "Perfect for ACNE",5));
        modify($skinProblems) {
            getProblems().remove(SkinIssue.ACNE);
        }
end

rule "Recommend products for SPOTS"
    salience 99
    when
        $skinProblems: SkinProblems(problems contains SkinIssue.SPOTS)
        $product: Product(benefits contains SkinBenefit.DARK_SPOT_REMOVAL)
    then
        System.out.println("2");
        insert(new RecommendedProduct($product, "Perfect for SPOTS",5));
        modify($skinProblems) {
            getProblems().remove(SkinIssue.SPOTS);
        }
end

rule "Recommend products for SCARS"
    salience 98
    when
        $skinProblems: SkinProblems(problems contains SkinIssue.SCARS)
        $product: Product(benefits contains SkinBenefit.SKIN_TEXTURE_IMPROVEMENT)
    then
        System.out.println("3");
        insert(new RecommendedProduct($product, "Perfect for SCARS",5));
        modify($skinProblems) {
            getProblems().remove(SkinIssue.SCARS);
        }
end


rule "Recommend products for ENLARGED_PORES"
    salience 97
    when
        $skinProblems: SkinProblems(problems contains SkinIssue.ENLARGED_PORES)
        $product: Product(benefits contains SkinBenefit.DETOXIFICATION)
    then
        System.out.println("4");
        insert(new RecommendedProduct($product, "Perfect for ENLARGED_PORES",5));
        modify($skinProblems) {
            getProblems().remove(SkinIssue.ENLARGED_PORES);
        }
end

rule "Recommend products for REDNESS"
    salience 96
    when
        $skinProblems: SkinProblems(problems contains SkinIssue.REDNESS)
        $product: Product(benefits contains SkinBenefit.IRRITATION_CALMING)
    then
        System.out.println("5");
        insert(new RecommendedProduct($product, "Perfect for REDNESS",5));
        modify($skinProblems) {
            getProblems().remove(SkinIssue.REDNESS);
        }
end

rule "Recommend products for ITCHINESS"
    salience 95
    when
        $skinProblems: SkinProblems(problems contains SkinIssue.ITCHINESS)
        $product: Product(benefits contains SkinBenefit.IRRITATION_CALMING)
    then
        System.out.println("6");
        insert(new RecommendedProduct($product, "Perfect for ITCHINESS",5));
        modify($skinProblems) {
            getProblems().remove(SkinIssue.ITCHINESS);
        }
end

rule "Recommend products for WRINKLES"
    salience 94
    when
        $skinProblems: SkinProblems(problems contains SkinIssue.WRINKLES)
        $product: Product(benefits contains SkinBenefit.ANTI_AGE)
    then
        System.out.println("7");
        insert(new RecommendedProduct($product, "Perfect for WRINKLES",5));
        modify($skinProblems) {
            getProblems().remove(SkinIssue.WRINKLES);
        }
end

rule "Recommend products for FRECKLES"
    salience 93
    when
        $skinProblems: SkinProblems(problems contains SkinIssue.FRECKLES)
        $product: Product(benefits contains SkinBenefit.HYPERPIGMENTATION_REDUCTION)
    then
        System.out.println("8");
        insert(new RecommendedProduct($product, "Perfect for FRECKLES",5));
        modify($skinProblems) {
            getProblems().remove(SkinIssue.FRECKLES);
        }
end

rule "Recommend products for BLACKHEADS"
    salience 92
    when
        $skinProblems: SkinProblems(problems contains SkinIssue.BLACKHEADS)
        $product: Product(benefits contains SkinBenefit.CLEANSING)
    then
        System.out.println("9");
        insert(new RecommendedProduct($product, "Perfect for BLACKHEADS",5));
        modify($skinProblems) {
            getProblems().remove(SkinIssue.BLACKHEADS);
        }
end

rule "Recommend products for LACK_OF_FIRMNESS"
    salience 91
    when
        $skinProblems: SkinProblems(problems contains SkinIssue.LACK_OF_FIRMNESS)
        $product: Product(benefits contains SkinBenefit.HYDRATION)
    then
        System.out.println("10");
        insert(new RecommendedProduct($product, "Perfect for LACK_OF_FIRMNESS",5));
        modify($skinProblems) {
            getProblems().remove(SkinIssue.LACK_OF_FIRMNESS);
        }
end

rule "Recommend products for ECZEMA"
    salience 90
    when
        $skinProblems: SkinProblems(problems contains SkinIssue.ECZEMA)
        $product: Product(benefits contains SkinBenefit.MOISTURIZING)
    then
        System.out.println("11");
        insert(new RecommendedProduct($product, "Perfect for ECZEMA",5));
        modify($skinProblems) {
            getProblems().remove(SkinIssue.ECZEMA);
        }
end



rule "Remove products with allergens"
    salience 50
    when
        $user : User($allergenIds : getAllergenIds() != null && !getAllergenIds().isEmpty())
        $rp : RecommendedProduct($product : getProduct())
        eval(!Collections.disjoint($product.getIngredientIds(), $allergenIds))
    then
        System.out.println("0");
        delete($rp);
end



rule "Add remaining recommended products"
    salience 4
    when
        $rp : RecommendedProduct()
    then
        System.out.println("01");
        recommendedProducts.add($rp);
        delete($rp);
end